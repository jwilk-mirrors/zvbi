About Linux "VBI proxy"
-----------------------

The "video4linux" drivers allow capturing only to one VBI client at
the same time.  This means, if you have a background application like
the nxtvepg daemon running, you won't be able to start a teletext
application.  [Note that although the v4l2 API allows multiple clients
to open the device, still only one client may capture the same frame's
data]

The VBI proxy is developed as a solution to this problem.  Afterall
there's no good reason that only one app should be able to capture VBI,
since there are many independent data streams, e.g. VPS/PDC (channel
identification and programme labels for video recoding), WSS (widescreen
and surround sound signalling), teletext, and inside teletext besides
the regular pages also subtitles, Nextview Electronic PRogramme Guide,
Teleweb (enhanced teletext based on HTML) and possibly more binary coded
data streams.

In particular there are some TV apps which always open /dev/vbi (for
subtitles, WSS or whatever) so it's currently impossible to capture
any of the above data services in the background.

As a second, optional feature, the proxy may in the future be used to
coordinate channel changes between multiple VBI background applications
or between video and VBI apps;  the latter is mainly interesting for
v4l2 drivers, where it's no longer possible to determine if a TV app
is running before switching the channel in a background app. That's
because in contrary to v4l1 the video device can be opened in any case.
Hence VBI currently may annoy v4l2 users by switching the channel
while you're watching TV.

One drawback of the proxy is that it requires to adapt all cooperating
VBI clients.  Hopefully the solution will be simple and elegant enough
to convince many authors to switch to libzvbi, or at least implement
the protocol.


2003-04-27
----------

I've got a working prototype for the VBI proxy based on libzvbi. Both
nxtvepg and alevt are already adapted for it.  Now you can run nxtvepg
and alevt in parallel, or multiple instances of alevt etc.  The client
interface to the proxy will probably not change (except for a few
additional functions to control channel changes) so authors could
already start to adapt their apps if interested.  Note the proxy daemon
is not complete yet, esp. dynamically merging different service requests
(i.e. services which read different VBI regions) might not work, it's
also not optimized at all yet.

I've made a demo proxy client "proxy-test" which serves as an example
how to work with libzvbi.  The daemon is called "proxyd".  Both apps
print usage info with -help. You can also look at my patch for alevt or
nxtvepg/epgvbi/btdrv4linux.c inside switch USE_LIBZVBI.  The effort for
the adaption should be only a few hours.

As basis you need zvbi-0.2.4 from http://zapping.sourceforge.net/,
proxy.tar.bz2 from http://nxtvepg.sourceforge.net/tmp/, unpacked in
the zvbi-0.2.4/src directory (you may need to merge rules for the proxy
modules manually into your own Makefile), and optionally alevt-1.6.1 and
nxtvepg-2.5.2pre0 from http://www.nefkom.net/tomzo/prj/nxtvepg/devel/.
If you're using a v4l2 driver you should upgrade to the latest version
from http://bytesex.org/snapshot/ and apply my patches from the above
tmp directory.

If you've got any questions, feel free to ask.

2003-05-10
----------

This is an unordered list of open points (i.e. unimplemented or yet
undecided) regarding the proxy.  Any comments or help appreciated.
The list will be updated in CVS along with the implementation.

- libzvbi.h: should contain HAVE_PROXY macro or other means to query
  if proxy interface is available at compile time (version number is not
  enough since proxy support might have been disabled config.h)
- services merge: new function add_services() has been added to io.h;
  still TODO: changing norm or buffer count
- add raw buffer forward, possibly based on shared memory to avoid copying
  (mmapped DMA buffers can probably not directly be shared though, so
  one copy will be required in conjunction with streams buffers; copying
  may also be required if the client uses the read() interface; shm should
  still be more efficient than stuffing everything through a socket)
- add io.c interface function to flush stream buffers & discard the next
  1-2 frames after a channel change.  Add note to documentation about
  performance issues, i.e. advise to request raw buffer only if required
- startup "rc" script for proxy daemon; add daemon and rc for installation;
  daemon should be renamed to vbiproxyd for installation
- daemon man page
- proxy main loop needs to be changed to work with drivers which don't
  support select on vbi (possibly use an additional thread which blocks
  in a read on the device)
- CONNECT_CNF message should include name of assorted video device for
  clients which might need it for tasks as channel switching (at least
  with v4l1 drivers the client cannot use the VBI device since it's kept
  busy by the daemon)
- add note to documentation that fd returned by capture_get_fd is only
  for select --> return -1 if select non-supported? (e.g. v4l1)
- inform clients about video norm changes: e.g. sampling rate may change
  (only relevant for raw data though), number of VBI lines may change,
  client may want to change service IDs.  Probably only for clients
  which explicitly enable this; others could simply be starved.
- device permissions are implemented by copying group id and access
  mask of the device.  This is not portable however according to man
  socket(7).  Possibly a sub-directory should be used and permissions
  set on the directory.  On in X11 way a key file could be used.
- manage channel change requests (see discussion on mailing list)
- add "-kill" option to daemon: kill already running daemon

Questions indirectly related to the daemon:

- There's a "time_per_frame" in the capture context: would be useful, but
  how can it be queried?  Currently it's unused.
- it's very unfortunate that the frame sequence counter is not made
  available; when using the read(2) with bttv that's the only reliable way
  to detect missing frames.  Unfortunately I don't see a way to add it to
  vbi_capture_buffer without losing binary compatibility.
- in v4l2k_new: what's the "guess" string for?  It's assigned but never used


-tom
